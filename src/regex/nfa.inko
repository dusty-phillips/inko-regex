import std::fmt::(Format, Formatter, fmt as format)
import std::cmp::(Equal)
import regex::matcher::(Group)
import debug::(debug)

# Based on https://deniskyashif.com/2019/02/17/implementing-a-regular-expression-engine/


# State is basically a container for transitions so we can replace
# states with new transitions while constructing an NFA.
class pub State {
  # The owned next transition(s) this state is currently wrapping.
  let @transition: Transition
  # Mark to avoid cycles when transitioning states
  let @mark_for_cycle_detection: Bool


  # Construct a new state, wrapping the provided transition
  #
  # This shouldn't need to be called publicly in general, but is marked
  # as public for unit test purposes.
  fn pub static new(transition: Transition) -> State {
    State {
      @transition = transition,
      @mark_for_cycle_detection = false
    }
  }

  # Construct a new state wrapping a new End transition
  fn pub static end() -> State {
    State {
      @transition = Transition.End,
      @mark_for_cycle_detection = false
    }
  }

  # Check whether or not this is an end state
  fn pub end?() -> Bool {
    match @transition {
      case End -> true
      case _ -> false
    }
  }

  # Replace the contained transition with a new one
  #
  # This isn't really meant to be used publicly, but is made pub for unit testing
  fn pub mut replace(new_transition: Transition) -> Transition {
    @transition := new_transition
  }

  # Clear cycle detection marks recursively, starting at this state.
  #
  # Only warks marks until an uncleared mark is detected.
  fn mut clear_cycle_detection_marks() {
    if (@mark_for_cycle_detection) {
      @mark_for_cycle_detection = false
      match @transition {
        case End -> nil
        case Reference(state) -> state.clear_cycle_detection_marks
        case Symbol(string, state) -> state.clear_cycle_detection_marks
        case Empty(state) -> state.clear_cycle_detection_marks
        case OpenGroup({@state=state}) -> state.clear_cycle_detection_marks
        case CloseGroup({@state=state}) -> state.clear_cycle_detection_marks
        case Split(Empty(state1), Empty(state2)) -> {
          state1.clear_cycle_detection_marks
          state2.clear_cycle_detection_marks
        }
        case Split(Reference(state1), Empty(state2)) -> {
          state1.clear_cycle_detection_marks
          state2.clear_cycle_detection_marks
        }
        case Split(_, _) -> panic("Unexpected split encountered during clear_cycle_detection_marks")
      }
    }
  }

  # After calling this, next_states_collector will contain refs to all States that are accessible
  # from this state via empty transitions.
  #
  # The returned states will all contain either Symbol or End transitions.
  #
  # A side effect of this function is that it marks states for cycle detection,
  # as it has to break out of recursive loops itself.
  #
  # You MUST call clear_cycle_detection_marks before calling it again with a new symbol.
  fn mut skip_to_symbol_transitions(next_states_collector: mut Array[ref State]) {
    if (@mark_for_cycle_detection) {
      return
    }
    @mark_for_cycle_detection = true

    match @transition {
      case End -> next_states_collector.push(self)
      case Symbol(symbol, state) -> next_states_collector.push(self)
      case Reference(state) -> state.skip_to_symbol_transitions(next_states_collector)
      case Empty(state) -> state.skip_to_symbol_transitions(next_states_collector)
      case OpenGroup({@state=state, @id=id}) -> state.skip_to_symbol_transitions(next_states_collector)
      case CloseGroup({@state=state, @id=id}) -> state.skip_to_symbol_transitions(next_states_collector)
      case Split(Empty(state1), Empty(state2)) -> {
        state1.skip_to_symbol_transitions(next_states_collector)
        state2.skip_to_symbol_transitions(next_states_collector)
      }
      case Split(Reference(state1), Empty(state2)) -> {
        state1.skip_to_symbol_transitions(next_states_collector)
        state2.skip_to_symbol_transitions(next_states_collector)
      }
      case Split(_, _) -> panic("Unexpected split encountered during skip_to_symbol_transitions")
    }
  }
}

impl Equal[State] for State {
  fn pub ==(other: ref State) -> Bool {
    match (self, other) {
      case ({@transition=transition}, {@transition=other_transition}) -> {
        transition == other_transition
      }
    }
  }
}

impl Format for State {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write("()")
    @transition.fmt(formatter)
  }
}

# Open and close groups need to track their group ID, which may change as unions and
# concatenations occur.
#
# Public for unit testing only.
class pub GroupTransition {
  # The owned next state that is the first state "inside" the group
  let @state: State
  # An identifier for the group, unique within an NFA. Current implementation
  # has this as the index of the ref in the groups array, but that may change.
  let @id: Int


  fn pub static new(state: State, id: Int) -> GroupTransition {
    GroupTransition {
      @state = state,
      @id = id
    }
  }

  fn pub move open() -> Transition {
    Transition.OpenGroup(self)
  }


  fn pub move close() -> Transition {
    Transition.CloseGroup(self)
  }
}

impl Equal[GroupTransition] for GroupTransition {
  fn pub ==(other: ref GroupTransition) -> Bool {
    match (self, other) {
      case ({@state=state, @id=id}, {@state=other_state, @id=other_id}) -> {
        state == other_state and id == other_id
      }
    }
  }
}

impl Format for GroupTransition {
  fn pub fmt(formatter: mut Formatter) {
    @id.fmt(formatter)
  }
}


# ADT for the various kinds of transitions a state can model.
class pub enum Transition {
  # The state containing this transition is an accepting End state with no further transitions
  case End
  # Transition to a new state if the given (single) character matches the one in the pattern
  case Symbol(String, State)
  # Transition to the next (owned) state without advancing a character (epsilon transition)
  case Empty(State)
  # Transition to the next (owned) state without advancing a character, but record that a group opened
  case OpenGroup(GroupTransition)
  # Transition to the t next (owned) state without advancing a character, but record that a group closed
  case CloseGroup(GroupTransition)
  # Transition to the next (reference) state without advancing a character (epsilon transition)
  case Reference(mut State)
  # Store up to two transitions. In practice, these will both be epsilon transitions.
  case Split(Transition, Transition)
}

impl Equal[Transition] for Transition {
  fn pub ==(other: ref Transition) -> Bool {
    match (self, other) {
      case (End, End) -> true
      case (Symbol(char, state), Symbol(other_char, other_state)) -> char == other_char and state == other_state
      case (Empty(state), Empty(other_state)) -> state == other_state
      case (
        OpenGroup({@state = state, @id=id}),
        OpenGroup({ @state = other_state, @id=other_id })
      )-> state == other_state and id == other_id
      case (
        CloseGroup({@state = state, @id=id}),
        CloseGroup({ @state = other_state, @id=other_id })
      )-> state == other_state and id == other_id
      case (Reference(state), Reference(other_state)) -> true # TODO: This doesn't verify *where* the ref points
      case(Split(t1, t2), Split(other_t1, other_t2)) -> t1 == other_t1 and t2 == other_t2
      case (_, _) -> false
    }
  }
}

impl Format for Transition {
  fn pub fmt(formatter: mut Formatter) {

    match self {
      case End -> {
        formatter.write("--->(End)")
      }
      case Symbol(string, state) -> {
        formatter.write("-{string}->\n")
        formatter.descend fn () {
          state.fmt(formatter)
        }
      }
      case Empty(state) -> {
        formatter.write("-ε->\n")
        formatter.descend fn() {
          state.fmt(formatter)
        }
      }
      case OpenGroup({@state=state, @id=id}) -> {
        formatter.write("-({id.to_string}->\n")
        state.fmt(formatter)
      }
      case CloseGroup({@state=state, @id=id}) -> {
        formatter.write("-{id.to_string})->\n")
        state.fmt(formatter)
      }
      case Reference(state) -> {
        formatter.write("-REF->\{\n")
        formatter.descend fn() {
          state.fmt(formatter)
        }
        formatter.write("\n}\n")
      }
      case Split(t1, t2) -> {
        formatter.write("-SPLIT->\{\n")
        t1.fmt(formatter)
        t2.fmt(formatter)
        formatter.write("\n}")
      }
    }
  }
}

# Represent a Non-deterministic finite state automaton for a regular expression.
#
# We only need to store the start state and a reference to the end state. This
# is enough for the various transition types to merge NFA's based on the various
# induction rules of (basic) regular expressions.
class pub Nfa {
  let pub @end: mut State
  let pub @groups: Array[(mut GroupTransition, mut GroupTransition)]
  let @start: State

  # Construct a new NFA from component states.
  #
  # This isn't really intended to be called publicly, but is made available
  # for unit testing.
  fn pub static new(start: State, end: mut State) -> Nfa {
    Nfa {
        @start=start,
        @end=end,
        @groups=[]
    }
  }

  # Construct a new, empty NFA comprised of a start state with an epsilon transition
  # to an empty state. S -ε-> E
  fn pub static empty() -> Nfa {
    let end = State.end
    let end_ref = mut end
    let start = State.new(Transition.Empty(end))

    Nfa.new(start, end_ref)
  }

  # Construct a new symbol NFA, comprised of a start state with a symbol transition
  # to an end state.
  #
  # S -a-> E
  fn pub static symbol(char: String) -> Nfa {
    let end = State.end
    let end_ref = mut end
    let start = State.new(Transition.Symbol(char, end))

    Nfa.new(start, end_ref)
  }

  # Concatenate the provided NFA to ourselves. (AND expression)
  fn pub mut concat(other: Nfa) {
    match other {
      case {@end=other_end, @start=other_start, @groups=other_groups} -> {
        let group_increment = @groups.length
        other_groups.into_iter.each fn (groupref) {
          groupref.0.id += group_increment
          groupref.1.id += group_increment
          @groups.push(groupref)
        }
        @end.replace(Transition.Empty(other_start))
        @end = other_end
      }
    }
  }

  # Union the provided NFA with ourselves. (OR expression)
  fn pub mut union(other: Nfa) {
    match other {
      case {@end=other_end, @start=other_start, @groups=other_groups} -> {
        let group_increment = @groups.length
        other_groups.into_iter.each fn (groupref) {
          groupref.0.id += group_increment
          groupref.1.id += group_increment
          @groups.push(groupref)
        }
        # Temporarily place new_end in start
        let old_start = State.new(@start.replace(Transition.End))
        let new_end = State.new(@start.replace(Transition.Split(Transition.Empty(old_start), Transition.Empty(other_start))))
        let new_end_ref = mut new_end
        @end.replace(Transition.Reference(new_end_ref))
        other_end.replace(Transition.Empty(new_end))
        @end = new_end_ref

      }
    }
  }

  # Turn the current NFA into one that can be matched zero or more times (*)
  fn pub mut zero_or_more() {
    let old_start = State.new(@start.replace(Transition.End))
    let old_start_ref = mut old_start
    let new_end = State.end
    let new_end_ref = mut new_end
    @start.replace(Transition.Split(Transition.Reference(mut new_end), Transition.Empty(old_start)))
    @end.replace(Transition.Split(Transition.Reference(old_start_ref), Transition.Empty(new_end)))
    @end = new_end_ref
  }

  # Turn the current NFA into one that can be matched one or more times (+)
  #
  # []-->([]-->[])-->[]
  #           |
  #       \----/
  fn pub mut one_or_more() {
    let old_start = State.new(@start.replace(Transition.End))
    let old_start_ref = mut old_start
    let new_end = State.new(@start.replace(Transition.Empty(old_start)))
    let new_end_ref = mut new_end
    @end.replace(Transition.Split(Transition.Reference(old_start_ref), Transition.Empty(new_end)))
    @end = new_end_ref
  }

  # Turn the current NFA into one that can be matched zero or one times (?)
  #
  # [] ->([]-->[])
  # |          
  # \---------/
  fn pub mut zero_or_one() {
    let old_start = State.new(@start.replace(Transition.End))
    @start.replace(Transition.Split(Transition.Reference(@end), Transition.Empty(old_start)))
  }

  # Turn the current NFA into an NFA that matches the identical expression, but records
  # that a group opens and closes before and after it.
  fn pub mut group() {
    let old_start = State.new(@start.replace(Transition.End))
    let open_transition = GroupTransition.new(old_start, @groups.length)
    let open_transition_mut = mut open_transition
    let new_end = State.new(@start.replace(open_transition.open))
    let new_end_ref = mut new_end
    let close_transition = GroupTransition.new(new_end, @groups.length)
    let close_transition_mut = mut close_transition
    @end.replace(close_transition.close)
    @end = new_end_ref
    @groups.push((open_transition_mut, close_transition_mut))

  }

  # Return true if the provided word matches the regular expression encoded in this NFA.
  #
  # Currently, match is defined as "an end state is reached starting from the currennt state".
  # Specifically, it is possible for a match to return true even if not all characetrs in the
  # provided word have been matched.
  fn pub mut matches(target: String) -> Option[Group] {
    let mut current_states = [mut @start]
    let characters = target.characters
    let mut character_option = characters.next
    let mut count = 0
    let mut longest_match = Option.None

    while (character_option).some? {
      let character = character_option.unwrap
      let mut next_states: Array[mut State] = []
      current_states.iter_mut.each fn (state) {
        state.skip_to_symbol_transitions(next_states)
        state.clear_cycle_detection_marks
      }
      # next_states now contains only Symbol or End transitions
      if next_states.iter.any?(fn (state) {state.end?}) {
        longest_match = Option.Some(Group.new(target, 0, count))
      }

      current_states = (next_states.iter_mut.select_map fn (state) {
        match state.transition {
          case End -> Option.None
          case Symbol(char, next_state) if char == character -> Option.Some(next_state)
          case Symbol(_, _) -> Option.None
          case _ -> panic("Unexpected transition in next_states")
        }
      }).to_array
      count += 1
      character_option = characters.next
      # current_states now contains only states that came after symbol transitions
    }


    let final_states = []
    current_states.iter_mut.each fn (state) {
      state.skip_to_symbol_transitions(final_states)
      state.clear_cycle_detection_marks
    }
    if final_states.iter.any?(fn (state) {state.end?}) {
      longest_match = Option.Some(Group.new(target, 0, count))
    }

    return longest_match
  }
}

impl Equal[Nfa] for Nfa {
  fn pub ==(other: ref Nfa) -> Bool {
    match (self, other) {
      case (
        {@end=end, @start=start, @groups=groups},
        {@end=other_end, @start=other_start, @groups=other_groups}
      ) -> {
        end == other_end and start == other_start and groups == other_groups
      }
    }
  }
}

impl Format for Nfa {
  fn pub fmt(formatter: mut Formatter) {
    formatter.write("Nfa \{\n")
    formatter.descend fn () {
      self.start.fmt(formatter)
    }
    formatter.write("\n}")
  }
}
