import std.iter.(Iter, Peekable)
import std.fmt.(Format, Formatter)
import std.cmp.(Equal)
import std.string.(StringBuffer)
import regex.nfa.(Nfa)
import regex.ascii

# Based on https://deniskyashif.com/2020/08/17/parsing-regex-with-recursive-descent/
#
# Operations:
# Concatenation (no symbol)
# Union |
# Character Class []
# Zero-or-more *
# One-or-more +
# Zero-or-one ?
# Grouping ()
# Escaping \
#
# Grammar:
# <expr> ::= <term> | <term>'|'<expr>
# <term> ::= <factor> | <factor><term>
# <factor> ::= <atom> | <atom><meta-char>
# <atom> ::= <char> | '['<any-chars>']'  | '('<expr>')'
# <char> ::= <any-char-except-meta-char-or-.> | '.' | '\'<any-char>
# <meta-char> ::= '?' | '*' | '+'

fn meta_char?(char: String) -> Bool {
  return char == '*' or char == '+' or char == '?'
}

trait pub TreeNode[T]: Format + Equal[T] {

  # Convert the parse tree to an NFA so it can be used for future matching.
  #
  # At some point, I want the parser to spit out NFAs directly instead
  # of maintaining this intermediate tree state, but during debugging
  # and development I wanted to keep the steps separated.
  fn pub to_nfa() -> Nfa
}

class pub enum Leaf {
  case Character(String) # any character excluding escaped characters
  case EscapedCharacter(String) # \*, \+, \?
  case String(String) # multiple characters, used as part of character class

  fn negated_class_string?() -> Bool {
    match self {
      case String(string) if string.starts_with?('^') ->true
      case _ -> false
    }
  }
}


impl Format for Leaf {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Character(char) -> formatter.write("Character {char}\n")
      case EscapedCharacter(char) -> formatter.write("EscapedCharacter {char}\n")
      case String(string) -> formatter.write("String {string}\n")
    }
  }
}


impl Equal[Leaf] for Leaf {
  fn pub ==(other: ref Leaf) -> Bool {
    match (self, other) {
      case (Character(char), Character(other_char)) -> char == other_char
      case (EscapedCharacter(char), EscapedCharacter(other_char)) -> char == other_char
      case (String(string), String(other_string)) -> string == other_string
      case _ -> false
    }
  }
}

impl TreeNode[Leaf] for Leaf {
  fn pub to_nfa() -> Nfa {
    match self {
      case Character(character) -> Nfa.symbol(character)
      case EscapedCharacter(character) -> {
        match character {
          case 'd' -> {
            let nfa = Nfa.symbol('0')
            1.to(9).iter.each fn (digit) {
              nfa.union(Nfa.symbol(digit.to_string))
            }

            nfa
          }
          case char -> Nfa.symbol(char)
        }
      }
      case String(characters) -> {
        let iter = characters.chars
        let nfa = match iter.next {
          case None -> Nfa.empty # empty character class shouldn't happen, but it's supported
          case Some(character) -> Nfa.symbol(character)
        }
        iter.each fn (character) {
          nfa.union(Nfa.symbol(character))
        }
        nfa
      }
    }
  }

}

class pub enum Atom {
  case Grouped(Expression) # (<expr>)
  case Character(Leaf) # <character>
  case Class(Leaf) # [<character_class>]
  case NegatedClass(Leaf) # [^<character_class>]
}

impl Format for Atom {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Grouped(expression) -> {
        formatter.write("Atom (Grouped)\n")
        expression.fmt(formatter)
      }
      case Character(character) -> {
        formatter.write("Atom (Character)\n  ")
        character.fmt(formatter)
      }
      case Class(string) -> {
        formatter.write("Atom (Class)\n  ")
        string.fmt(formatter)
      }
      case NegatedClass(string) -> {
        formatter.write("Atom (Negated Class)\n  ")
        string.fmt(formatter)
      }
    }
  }
}

impl Equal[Atom] for Atom {
  fn pub ==(other: ref Atom) -> Bool {
    match (self, other) {
      case(Grouped(expression), Grouped(other_expression)) -> expression == other_expression
      case (Character(leaf), Character(other_leaf)) -> leaf == other_leaf
      case (Class(leaf), Class(other_leaf)) -> leaf == other_leaf
      case (NegatedClass(leaf), NegatedClass(other_leaf)) -> leaf == other_leaf
      case _ -> false
    }
  }
}

impl TreeNode[Atom] for Atom {
  fn pub to_nfa() -> Nfa {
    match self {
      case Grouped(expression) -> {
          let nfa = expression.to_nfa
          nfa.group
          nfa
      }
      case Character(leaf) -> leaf.to_nfa
      case Class(leaf) -> leaf.to_nfa
      case NegatedClass(String(string)) -> {
        if string.size > 0 and string.starts_with?('^').false? {
          panic("Should not have negated class that doesn't start with ^. This is a bug.")
        }
        Nfa.exclude_symbols(string.substring(1, string.size - 1))

      }
      case NegatedClass(_) -> panic("This should never happen")
    }
  }
}

class pub enum Factor {
  case Single(Atom) # <atom>
  case ZeroOrMore(Atom) # <atom> *
  case ZeroOrOne(Atom) # <atom> ?
  case OneOrMore(Atom) # <atom> +
}

impl Format for Factor {
  fn pub fmt(formatter: mut Formatter) {
    match (self) {
      case Single(atom) -> {
        formatter.write("Factor (Single)\n)")
        atom.fmt(formatter)
      }
      case ZeroOrMore(atom) -> {
        formatter.write("Factor (ZeroOrMore)\n")
        atom.fmt(formatter)
      }
      case ZeroOrOne(atom) -> {
        formatter.write("Factor (ZeroOrOne)\n")
        atom.fmt(formatter)
      }
      case OneOrMore(atom) -> {
        formatter.write("Factor (OneOrMore)\n")
        atom.fmt(formatter)
      }
    }
  }
}

impl Equal[Factor] for Factor {
  fn pub ==(other: ref Factor) -> Bool {
    match (self, other) {
      case(Single(node), Single(other_node)) -> node == other_node
      case(ZeroOrOne(node), ZeroOrOne(other_node)) -> node == other_node
      case(ZeroOrMore(node), ZeroOrMore(other_node)) -> node == other_node
      case(OneOrMore(node), OneOrMore(other_node)) -> node == other_node
      case _ -> false
    }
  }
}

impl TreeNode[Factor] for Factor {
  fn pub to_nfa() -> Nfa {
    match self {
      case Single(factor) -> factor.to_nfa
      case ZeroOrMore(factor) -> {
        let nfa = factor.to_nfa
        nfa.zero_or_more
        nfa
      }
      case ZeroOrOne(factor) -> {
        let nfa = factor.to_nfa
        nfa.zero_or_one
        nfa
      }
      case OneOrMore(factor) -> {
        let nfa = factor.to_nfa
        nfa.one_or_more
        nfa
      }

    }
  }
}

class pub enum Term {
  case Single(Factor) # <factor>
  case Concat(Factor, Term) # <factor><term>
}

impl Format for Term {
  fn pub fmt(formatter: mut Formatter) {
    match (self) {
      case Single(term) -> {
        formatter.write("Term (Single Factor)\n")
        term.fmt(formatter)
      }
      case Concat(factor, term) -> {
        formatter.write("Term (Concat)\n")
        factor.fmt(formatter)
        term.fmt(formatter)
      }
    }
  }
}

impl Equal[Term] for Term {
  fn pub ==(other: ref Term) -> Bool {
    match (self, other) {
      case (Single(node), Single(other_node)) -> node == other_node
      case (Concat(node1, node2), Concat(other_node1, other_node2)) -> node1 == other_node1 and node2 == other_node2
      case _ -> false
    }
  }
}


impl TreeNode[Term] for Term {
  fn pub to_nfa() -> Nfa {
    match self {
      case Single(term) -> term.to_nfa
      case Concat(factor, term) -> {
        let nfa = factor.to_nfa
        let other_nfa = term.to_nfa
        nfa.concat(other_nfa)
        nfa
      }

    }
  }
}


# Represents a node in a regex parse tree. Grammar is described above.
class pub enum Expression {
  case Single(Term) # <term>
  case Union(Term, Expression) # <term> | <expr>
}


impl Format for Expression {
  fn pub fmt(formatter: mut Formatter) {
    match (self) {
      case Single(term) -> {
        formatter.write("Expression (Single)\n")
        term.fmt(formatter)
      }
      case Union(term, expression) -> {
        formatter.write("Expression (Union)\n")
        term.fmt(formatter)
        expression.fmt(formatter)
      }
    }
  }
}

impl Equal[Expression] for Expression {
  fn pub ==(other: ref Expression) -> Bool {
    match (self, other) {
      case (Single(node), Single(other_node)) -> node == other_node
      case (Union(node1, node2), Union(other_node1, other_node2)) -> node1 == other_node1 and node2 == other_node2
      case _ -> false
    }
  }
}


impl TreeNode[Expression] for Expression {
  fn pub to_nfa() -> Nfa {
    match self {
      case Single(term) -> term.to_nfa
      case Union(term, expression) -> {
        let nfa = term.to_nfa
        let other_nfa = expression.to_nfa
        nfa.union(other_nfa)
        nfa
      }
    }
  }
}


# Regular Expression Parser that accepts a pattern string
# and uses a linear-time recursive descent algorithm to
# convert it into a tree of TreeNode objects.
class pub Parser {
  let @pattern_iter: Peekable[String]

  # Construct a new parser around the given pattern.
  fn pub static new(pattern: String) -> Parser {
    Parser {
      @pattern_iter = pattern.chars.peekable
    }
  }

  # Convert the pattern to a parsed tree
  fn pub mut parse() -> Expression {
    self.expression()
  }

  # Eat an expression off the parser and return it.
  #
  # <term> | <term>'|'<expr>
  fn mut expression() -> Expression {
    let term = self.term

    match @pattern_iter.peek {
      case None -> Expression.Single(term)
      case Some(char) if char == '|' -> {
        @pattern_iter.next
        let expression = self.expression
        Expression.Union(term, expression)
      }
      case Some(char) -> Expression.Single(term)
    }
  }

  # Eat a term off the parser
  #
  # <factor> | <factor><term>
  fn mut term() -> Term {
    let factor = self.factor

    match @pattern_iter.peek {
      case None -> Term.Single(factor)
      case Some(char) if char == ")" or char == "|" -> {
        Term.Single(factor)
      }
      case Some(char) -> {
        let term = self.term
        Term.Concat(factor, term)
      }
    }
  }

  # Eat a factor off the parser
  #
  # <atom> | <atom><meta-char>
  fn mut factor() -> Factor {
    let atom = self.atom
    match @pattern_iter.peek {
      case None -> Factor.Single(atom)
      case Some(char) if meta_char?(char) -> {
          match @pattern_iter.next {
              case None -> panic("impossible")
              case Some('*') -> Factor.ZeroOrMore(atom)
              case Some('?') -> Factor.ZeroOrOne(atom)
              case Some('+') -> Factor.OneOrMore(atom)
              case Some(char) -> panic("impossible")
          }
      }
      case Some(char) -> Factor.Single(atom)
    }
  }

  # Eat an atom off the parser
  #
  # <char> | '['chars']' | '('<expr>')'
  fn mut atom() -> Atom {
    match @pattern_iter.peek {
      case None -> panic("unexpected end of input")
      case Some(char) if char == '(' -> {
        @pattern_iter.next
        let expression = self.expression
        match @pattern_iter.peek {
          case None -> panic("No closing )")
          case Some(')') -> {
            @pattern_iter.next
            Atom.Grouped(expression)
          }
          case Some(char) -> panic("Expected ), got {char}")
        }
      }
      case Some(char) if char == '[' -> {
        @pattern_iter.next
        let characters = self.character_class
        match @pattern_iter.peek {
          case None -> panic("No closing ]")
          case Some(']') -> {
            @pattern_iter.next
            if (characters.negated_class_string?) {
              Atom.NegatedClass(characters)
            }
            else {
              Atom.Class(characters)
            }
          }
          case Some(char) -> panic("Expected ], got {char}")
        }

      }
      case Some(char) if char == '.' -> {
        @pattern_iter.next
        Atom.NegatedClass(Leaf.String(""))
      }
      case Some(char) -> {
        let character = self.character
        Atom.Character(character)
      }
    }
  }

  # Eat a (possibly escaped) character off the parser
  #
  # <any-char-except-meta-char> | '\'<any-char>
  fn mut character() -> Leaf {
    match @pattern_iter.peek {
      case None -> panic("unexpected end of input")
      case Some(char) if meta_char?(char) -> panic("Unexpected meta char {char}")
      case Some(char) if char == "\\" -> {
        @pattern_iter.next
        match @pattern_iter.next {
          case None -> panic("Unexpected end of string after escape")
          case Some(char) -> Leaf.EscapedCharacter(char)
        }
      }
      case Some(char) -> {
        @pattern_iter.next
        Leaf.Character(char)
      }
    }
  }

  #Eat everything until a closing `]` is encountered
  fn mut character_class() -> Leaf {
    let buffer = StringBuffer.new
    loop {
      match @pattern_iter.peek {
        case None -> panic("unclosed character class: expected ]")
        case Some(']') -> return Leaf.String(buffer.into_string)
        case Some(char) -> {
          @pattern_iter.next
          match @pattern_iter.peek {
            case Some('-') -> buffer.push(self.character_class_range(char))
            case _ -> buffer.push(char)
          }
        }
      }
    }
  }

  # Eat the tail of a range, returning all the characters in that range.
  fn mut character_class_range(start: String) -> String {
    let start_ord = start.byte(0)
    @pattern_iter.next # Eat the -
    match @pattern_iter.next {
      case None -> panic('unclosed character range after -')
      case Some(']') -> panic('unclosed character range before ]')
      case Some(end) -> {
        let end_ord = end.byte(0)
        if end_ord < start_ord {panic("Bad Character range {start}-{end}")}
        let chars = StringBuffer.new
        start_ord.to(end_ord).iter.each fn (ord) {chars.push(ascii.chr(ord))}
        chars.into_string
      }
    }




  }
}


