import std::stdio::(STDOUT)
import std::test::Tests
import std::fmt::(fmt)
import regex::nfa::(Nfa, State, Transition)

fn pub tests(t: mut Tests) {
  t.test("Concat two empty NFAs") fn (t) {
    let nfa = Nfa.empty
    nfa.concat(Nfa.empty)


    t.equal(fmt(nfa), "Nfa \{
()-ε->
()-ε->
()-ε->
()--->(End)
}") }

  t.test("Concat two symbol NFAs") fn (t) {
    let nfa = Nfa.symbol("a")
    nfa.concat(Nfa.symbol("b"))

    t.equal(fmt(nfa), "Nfa \{
()-a->
()-ε->
()-b->
()--->(End)
}") }

  t.test("Union two empty NFAs") fn (t) {
    let nfa = Nfa.empty
    nfa.union(Nfa.empty)
  }

  t.test("Union two symbol NFAs") fn (t) {
    let nfa = Nfa.symbol("a")
    nfa.union(Nfa.symbol("b"))
  }

  t.test("zero or more on empty NFA") fn (t) {
    let nfa = Nfa.empty
    nfa.zero_or_more
  }


  t.test("zero or more on symbol NFA") fn (t) {
    let nfa = Nfa.symbol("a")
    nfa.zero_or_more
  }

  t.test("one or more on empty NFA") fn (t) {
    let nfa = Nfa.empty
    nfa.one_or_more
  }


  t.test("one or more on symbol NFA") fn (t) {
    let nfa = Nfa.symbol("a")
    nfa.one_or_more
  }
}
