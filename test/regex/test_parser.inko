
import std::test::Tests
import regex::parser::(TreeNode, Parser)

fn pub tests(t: mut Tests) {
  t.test("Parse a single character") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('a'), true)
    t.equal(nfa.match('b'), false)
  }

  t.test("Parse two character concatenation") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.ConcatTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.Character('a')
          )
        ),
        TreeNode.SingleTerm(
          TreeNode.SingleFactor(
            TreeNode.CharacterAtom(
              TreeNode.Character('b')
            )
          )
        )
      )
    )

    let parser = Parser.new('ab')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('ab'), true)
    t.equal(nfa.match('zz'), false)


  }

  t.test("Parse a union of two characters") fn (t) {
    let expected = TreeNode.UnionExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.Character('a')
          )
        )
      ),
      TreeNode.SingleExpression(
        TreeNode.SingleTerm(
          TreeNode.SingleFactor(
            TreeNode.CharacterAtom(
              TreeNode.Character('b')
            )
          )
        )
      )
    )
    let parser = Parser.new('a|b')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa
    # t.equal(nfa.match('a'), true) # fails, compiler bug
    # t.equal(nfa.match('b'), true) # fails, compiler bug
    # t.equal(nfa.match('c'), false) # fails, compiler bug
  }

  t.test("Parse a single character zero or more") fn (t) {
   let expected = TreeNode.SingleExpression(
    TreeNode.SingleTerm(
      TreeNode.ZeroOrMoreFactor(
        TreeNode.CharacterAtom(
          TreeNode.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a*')
    let tree = parser.parse()
    t.equal(tree, expected)


    let nfa = tree.to_nfa
    # t.equal(nfa.match('a'), true) # fails, compiler bug
    # t.equal(nfa.match('aa'), true) # fails, compiler bug
    # t.equal(nfa.match('aaaaaaaaa'), true) # fails, compiler bug
    # t.equal(nfa.match(''), true) # fails, program bug
    # t.equal(nfa.match('b'), false) # fails, compiler bug
  }


  t.test("Parse a single character zero or one") fn (t) {
   let expected = TreeNode.SingleExpression(
    TreeNode.SingleTerm(
      TreeNode.ZeroOrOneFactor(
        TreeNode.CharacterAtom(
          TreeNode.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    # t.equal(nfa.match('a'), true) # fails, compiler bug
    # t.equal(nfa.match('aa'), true) # fails, compiler bug
    # t.equal(nfa.match(''), true) # fails, program bug
    # t.equal(nfa.match('b'), false) # fails, compiler bug
  }

  t.test("Parse a single character one or more") fn (t) {
   let expected = TreeNode.SingleExpression(
    TreeNode.SingleTerm(
      TreeNode.OneOrMoreFactor(
        TreeNode.CharacterAtom(
          TreeNode.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match(''), false)
    # t.equal(nfa.match('a'), true) # fails, program bug
    # t.equal(nfa.match('aa'), true) # error, compiler bug
    # t.equal(nfa.match('aaaa'), true) # error compiler bug
    t.equal(nfa.match('b'), false)
  }

  t.test("Parse a single character grouping") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.GroupedAtom(
            TreeNode.SingleExpression(
              TreeNode.SingleTerm(
                TreeNode.SingleFactor(
                  TreeNode.CharacterAtom(
                    TreeNode.Character('a')
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(a)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('a'), true)
    t.equal(nfa.match('b'), false)
  }

  t.test("Parse a multi character grouping") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.GroupedAtom(
            TreeNode.SingleExpression(
              TreeNode.ConcatTerm(
                TreeNode.SingleFactor(
                  TreeNode.CharacterAtom(
                    TreeNode.Character('a')
                  )
                ),
                TreeNode.SingleTerm(
                  TreeNode.SingleFactor(
                    TreeNode.CharacterAtom(
                      TreeNode.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('ab'), true)
    t.equal(nfa.match('bc'), false)
  }

  t.test('Parse a multi character grouping zero or one') fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.ZeroOrOneFactor(
          TreeNode.GroupedAtom(
            TreeNode.SingleExpression(
              TreeNode.ConcatTerm(
                TreeNode.SingleFactor(
                  TreeNode.CharacterAtom(
                    TreeNode.Character('a')
                  )
                ),
                TreeNode.SingleTerm(
                  TreeNode.SingleFactor(
                    TreeNode.CharacterAtom(
                      TreeNode.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    # t.equal(nfa.match('ab'), true) # fails, compiler bug
    # t.equal(nfa.match(''), true) # fails, program bug
  }


  t.test("Parse an escaped *") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.EscapedCharacter('*')
          )
        )
      )
    )

    let parser = Parser.new('\*')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('*'), true)
    t.equal(nfa.match('\\'), false)
  }


  t.test("Parse an escaped +") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.EscapedCharacter('+')
          )
        )
      )
    )

    let parser = Parser.new('\+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('+'), true)
    t.equal(nfa.match('\\'), false)
  }


  t.test("Parse an escaped \\") fn (t) {
    let expected = TreeNode.SingleExpression(
      TreeNode.SingleTerm(
        TreeNode.SingleFactor(
          TreeNode.CharacterAtom(
            TreeNode.EscapedCharacter('\\')
          )
        )
      )
    )

    let parser = Parser.new('\\\\')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.match('\\'), true)
    # t.equal(nfa.match('\*'), false) # fails, program bug
  }
}
