
import std.fmt.(fmt)
import std.test.Tests
import regex.parser.(Expression, Term, Factor, Atom, Leaf, Parser)
import regex.nfa.(Nfa, State, Transition)
import regex.matcher.(Group, Match)

fn pub tests(t: mut Tests) {
  t.test("Parse exactly one character") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new("a", 0, 1), []))
    )
    t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse two character concatenation") fn (t) {
    let expected = Expression.Single(
      Term.Concat(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        ),
        Term.Single(
          Factor.Single(
            Atom.Character(
              Leaf.Character('b')
            )
          )
        )
      )
    )

    let parser = Parser.new('ab')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('ab'),
      Option.Some(Match.new(Group.new("ab", 0, 2), []))
    )
    t.equal(nfa.matches('zz'), Option.None)


  }

  t.test("Parse a union of two characters") fn (t) {
    let expected = Expression.Union(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      ),
      Expression.Single(
        Term.Single(
          Factor.Single(
            Atom.Character(
              Leaf.Character('b')
            )
          )
        )
      )
    )
    let parser = Parser.new('a|b')
    let tree = parser.parse()
    t.equal(tree, expected)

    let expected = {
      let end = State.end
      let end_mut = mut end
      let start = State.new(Transition.Split(
        Transition.Empty(
          State.new(Transition.Symbol("a", State.new(Transition.Reference(end_mut))))
        ),
        Transition.Empty(
          State.new(Transition.Symbol("b", State.new(Transition.Empty(end))))
        )
      ))

      Nfa.new(start, end_mut)
    }

    let nfa = tree.to_nfa
    t.equal(nfa, expected)

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 1), []))
    )
    t.equal(nfa.matches('c'), Option.None)
  }

  t.test("Parse a single character zero or more") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.ZeroOrMore(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a*')
    let tree = parser.parse()
    t.equal(tree, expected)


    let nfa = tree.to_nfa
    t.equal(
      nfa.matches(''),
      Option.Some(Match.new(Group.new('', 0, 0), []))
    )
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('aa'),
      Option.Some(Match.new(Group.new('aa', 0, 2), []))
    )
    t.equal(
      nfa.matches('aaaaaaaaa'),
      Option.Some(Match.new(Group.new('aaaaaaaaa', 0, 9), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 0), []))
    )
  }


  t.test("Parse a single character zero or one") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.ZeroOrOne(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('aa'),
      Option.Some(Match.new(Group.new('aa', 0, 1), []))
    )
    t.equal(
      nfa.matches(''),
      Option.Some(Match.new(Group.new('', 0, 0), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 0), []))
    )
  }

  t.test("Parse a single character one or more") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.OneOrMore(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches(''), Option.None)
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('aa'),
      Option.Some(Match.new(Group.new('aa', 0, 2), []))
    )
    t.equal(
      nfa.matches('aaaa'),
      Option.Some(Match.new(Group.new('aaaa', 0, 4), []))
    )
    t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse a single character grouping") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Grouped(
            Expression.Single(
              Term.Single(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(a)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), [Option.Some(Group.new('a', 0, 1))]))
    )
    t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse a multi character grouping") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Grouped(
            Expression.Single(
              Term.Concat(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                ),
                Term.Single(
                  Factor.Single(
                    Atom.Character(
                      Leaf.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('ab'),
      Option.Some(Match.new(Group.new('ab', 0, 2), [Option.Some(Group.new('ab', 0, 2))]))
    )
    t.equal(nfa.matches('a'), Option.None)
    t.equal(nfa.matches('bc'), Option.None)
  }

  t.test('Parse a multi character grouping zero or one') fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.ZeroOrOne(
          Atom.Grouped(
            Expression.Single(
              Term.Concat(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                ),
                Term.Single(
                  Factor.Single(
                    Atom.Character(
                      Leaf.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('ab'),
      Option.Some(Match.new(Group.new('ab', 0, 2), [Option.Some(Group.new('ab', 0, 2))]))
    )
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 0), [Option.None]))
    )
    t.equal(
      nfa.matches(''),
      Option.Some(Match.new(Group.new('', 0, 0), [Option.None]))
    )
  }

  t.test("Parse multiple character groupings") fn (t) {
    let expected = Expression.Single(
      Term.Concat(
        Factor.Single(
          Atom.Grouped(
            Expression.Single(
              Term.Concat(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                ),
                Term.Single(
                  Factor.Single(
                    Atom.Character(
                      Leaf.Character('b')
                    )
                  )
                )
              )
            )
          )
        ),
        Term.Single(
          Factor.Single(
            Atom.Grouped(
              Expression.Single(
                Term.Concat(
                  Factor.Single(
                    Atom.Character(Leaf.Character('c'))
                  ),
                  Term.Single(
                    Factor.Single(
                      Atom.Character(Leaf.Character('d'))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)(cd)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('abcd'),
      Option.Some(
        Match.new(
          Group.new('abcd', 0, 4),
          [Option.Some(Group.new('abcd', 0, 2)), Option.Some(Group.new('abcd', 2, 4))]
        )
      )
    )
  }


  t.test("Parse an escaped *") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('*')
          )
        )
      )
    )

    let parser = Parser.new('\*')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('*'),
      Option.Some(Match.new(Group.new('*', 0, 1), []))
    )
    t.equal(nfa.matches('\\'), Option.None)
  }


  t.test("Parse an escaped +") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('+')
          )
        )
      )
    )

    let parser = Parser.new('\+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('+'),
      Option.Some(Match.new(Group.new('+', 0, 1), []))
    )
    t.equal(nfa.matches('\\'), Option.None)
  }


  t.test("Parse an escaped \\") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('\\')
          )
        )
      )
    )

    let parser = Parser.new('\\\\')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('\\'),
      Option.Some(Match.new(Group.new('\\', 0, 1), []))
    )
    t.equal(nfa.matches('*'), Option.None)
  }

  t.test("Parse an escaped \\.") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('.')
          )
        )
      )
    )

    let parser = Parser.new('\\.')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa
    t.equal(nfa.matches('.'), Option.Some(Match.new(Group.new('.', 0, 1), [])))
  }

  t.test("Parse an escaped \\d") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('d')
          )
        )
      )
    )

    let parser = Parser.new('\\d')
    let tree = parser.parse()
    t.equal(tree, expected)
    let nfa = tree.to_nfa
    t.equal(nfa.matches('0'), Option.Some(Match.new(Group.new('0', 0, 1), [])))
    t.equal(nfa.matches('1'), Option.Some(Match.new(Group.new('1', 0, 1), [])))
    t.equal(nfa.matches('2'), Option.Some(Match.new(Group.new('2', 0, 1), [])))
    t.equal(nfa.matches('3'), Option.Some(Match.new(Group.new('3', 0, 1), [])))
    t.equal(nfa.matches('4'), Option.Some(Match.new(Group.new('4', 0, 1), [])))
    t.equal(nfa.matches('5'), Option.Some(Match.new(Group.new('5', 0, 1), [])))
    t.equal(nfa.matches('6'), Option.Some(Match.new(Group.new('6', 0, 1), [])))
    t.equal(nfa.matches('7'), Option.Some(Match.new(Group.new('7', 0, 1), [])))
    t.equal(nfa.matches('8'), Option.Some(Match.new(Group.new('8', 0, 1), [])))
    t.equal(nfa.matches('9'), Option.Some(Match.new(Group.new('9', 0, 1), [])))
    t.equal(nfa.matches('a'), Option.None)
    t.equal(nfa.matches('b'), Option.None)
    t.equal(nfa.matches(''), Option.None)


  }

  t.test("Parse an empty character class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('')
          )
        )
      )
    )

    let parser = Parser.new('[]')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa
    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 0), []))
    )
    t.equal(
      nfa.matches(''),
      Option.Some(Match.new(Group.new('', 0, 0), []))
    )
  }

  t.test("Parse a character class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('abc')
          )
        )
      )
    )

    let parser = Parser.new('[abc]')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 1), []))
    )
    t.equal(
      nfa.matches('c'),
      Option.Some(Match.new(Group.new('c', 0, 1), []))
    )
    t.equal(nfa.matches('d'), Option.None)
    t.equal(nfa.matches(''), Option.None)
  }

  t.test("Parse a single wildcard") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.NegatedClass(
            Leaf.String('')
          )
        )
      )
    )
    let parser = Parser.new('.')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 1), []))
    )
    t.equal(
      nfa.matches('abbb'),
      Option.Some(Match.new(Group.new('abbb', 0, 1), []))
    )
    t.equal(nfa.matches(''), Option.None)
  }

  t.test("Parse an empty negated class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.NegatedClass(
            Leaf.String('^')
          )
        )
      )
    )
    let parser = Parser.new('[^]')
    let tree = parser.parse()
    t.equal(tree, expected)


    let nfa = tree.to_nfa

    t.equal(
      nfa.matches('a'),
      Option.Some(Match.new(Group.new('a', 0, 1), []))
    )
    t.equal(
      nfa.matches('b'),
      Option.Some(Match.new(Group.new('b', 0, 1), []))
    )
    t.equal(
      nfa.matches('abbb'),
      Option.Some(Match.new(Group.new('abbb', 0, 1), []))
    )
    t.equal(nfa.matches(''), Option.None)
  }

  t.test("Parse a non-empty negated class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.NegatedClass(
            Leaf.String('^abc')
          )
        )
      )
    )

    let parser = Parser.new('[^abc]')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa


    t.equal(
      nfa.matches('d'),
      Option.Some(Match.new(Group.new('d', 0, 1), []))
    )
    t.equal(
      nfa.matches('e'),
      Option.Some(Match.new(Group.new('e', 0, 1), []))
    )
    t.equal(
      nfa.matches('dbbb'),
      Option.Some(Match.new(Group.new('dbbb', 0, 1), []))
    )
    t.equal(nfa.matches(''), Option.None)
    t.equal(nfa.matches('a'), Option.None)
    t.equal(nfa.matches('b'), Option.None)
    t.equal(nfa.matches('c'), Option.None)
    t.equal(nfa.matches('abcdddd'), Option.None)
  }

  t.test("Parse a character class range") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('01234')
          )
        )
      )
    )

    let parser = Parser.new('[0-4]')
    let tree = parser.parse()
    t.equal(tree, expected)
  }


  t.test("Parse alphanumeric range") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
          )
        )
      )
    )

    let parser = Parser.new('[0-9a-zA-Z]')
    let tree = parser.parse()
    t.equal(tree, expected)
  }
}
