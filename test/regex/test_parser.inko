
import std::fmt::(fmt)
import std::test::Tests
import regex::parser::(Expression, Term, Factor, Atom, Leaf, Parser)
import regex::nfa::(Nfa, State, Transition)
import regex::matcher::(Match)
import debug::(debug)

fn pub tests(t: mut Tests) {
  t.test("Parse exactly one character") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      )
    )

    let parser = Parser.new('a')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('a'), Option.Some(Match.new("a", 0, 1)))
    # t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse two character concatenation") fn (t) {
    let expected = Expression.Single(
      Term.Concat(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        ),
        Term.Single(
          Factor.Single(
            Atom.Character(
              Leaf.Character('b')
            )
          )
        )
      )
    )

    let parser = Parser.new('ab')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('ab'), Option.Some(Match.new("ab", 0, 2)))
    t.equal(nfa.matches('zz'), Option.None)


  }

  t.test("Parse a union of two characters") fn (t) {
    let expected = Expression.Union(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.Character('a')
          )
        )
      ),
      Expression.Single(
        Term.Single(
          Factor.Single(
            Atom.Character(
              Leaf.Character('b')
            )
          )
        )
      )
    )
    let parser = Parser.new('a|b')
    let tree = parser.parse()
    t.equal(tree, expected)

    let expected = {
      let end = State.end
      let end_mut = mut end
      let start = State.new(Transition.Split(
        Transition.Empty(
          State.new(Transition.Symbol("a", State.new(Transition.Reference(end_mut))))
        ),
        Transition.Empty(
          State.new(Transition.Symbol("b", State.new(Transition.Empty(end))))
        )
      ))

      Nfa.new(start, end_mut)
    }

    let nfa = tree.to_nfa
    t.equal(nfa, expected)

    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('b'), Option.Some(Match.new('b', 0, 1)))
    t.equal(nfa.matches('c'), Option.None)
  }

  t.test("Parse a single character zero or more") fn (t) {
   let expected = Expression.Single(
    Term.Single(
      Factor.ZeroOrMore(
        Atom.Character(
          Leaf.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a*')
    let tree = parser.parse()
    t.equal(tree, expected)


    let nfa = tree.to_nfa
    t.equal(nfa.matches(''), Option.Some(Match.new('', 0, 0)))
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('aa'), Option.Some(Match.new('aa', 0, 2)))
    t.equal(nfa.matches('aaaaaaaaa'), Option.Some(Match.new('aaaaaaaaa', 0, 9)))
    t.equal(nfa.matches('b'), Option.Some(Match.new('b', 0, 0)))
  }


  t.test("Parse a single character zero or one") fn (t) {
   let expected = Expression.Single(
    Term.Single(
      Factor.ZeroOrOne(
        Atom.Character(
          Leaf.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('aa'), Option.Some(Match.new('aa', 0, 1)))
    t.equal(nfa.matches(''), Option.Some(Match.new('', 0, 0)))
    t.equal(nfa.matches('b'), Option.Some(Match.new('b', 0, 0)))
  }

  t.test("Parse a single character one or more") fn (t) {
   let expected = Expression.Single(
    Term.Single(
      Factor.OneOrMore(
        Atom.Character(
          Leaf.Character('a')
        )
      )
    )
   )

    let parser = Parser.new('a+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches(''), Option.None)
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('aa'), Option.Some(Match.new('aa', 0, 2)))
    t.equal(nfa.matches('aaaa'), Option.Some(Match.new('aaaa', 0, 4)))
    t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse a single character grouping") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Grouped(
            Expression.Single(
              Term.Single(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(a)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('b'), Option.None)
  }

  t.test("Parse a multi character grouping") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Grouped(
            Expression.Single(
              Term.Concat(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                ),
                Term.Single(
                  Factor.Single(
                    Atom.Character(
                      Leaf.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('ab'), Option.Some(Match.new('ab', 0, 2)))
    t.equal(nfa.matches('a'), Option.None)
    t.equal(nfa.matches('bc'), Option.None)
  }

  t.test('Parse a multi character grouping zero or one') fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.ZeroOrOne(
          Atom.Grouped(
            Expression.Single(
              Term.Concat(
                Factor.Single(
                  Atom.Character(
                    Leaf.Character('a')
                  )
                ),
                Term.Single(
                  Factor.Single(
                    Atom.Character(
                      Leaf.Character('b')
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    let parser = Parser.new('(ab)?')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('ab'), Option.Some(Match.new('ab', 0, 2)))
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 0)))
    t.equal(nfa.matches(''), Option.Some(Match.new('', 0, 0)))
  }


  t.test("Parse an escaped *") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('*')
          )
        )
      )
    )

    let parser = Parser.new('\*')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('*'), Option.Some(Match.new('*', 0, 1)))
    t.equal(nfa.matches('\\'), Option.None)
  }


  t.test("Parse an escaped +") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('+')
          )
        )
      )
    )

    let parser = Parser.new('\+')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('+'), Option.Some(Match.new('+', 0, 1)))
    t.equal(nfa.matches('\\'), Option.None)
  }


  t.test("Parse an escaped \\") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Character(
            Leaf.EscapedCharacter('\\')
          )
        )
      )
    )

    let parser = Parser.new('\\\\')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('\\'), Option.Some(Match.new('\\', 0, 1)))
    t.equal(nfa.matches('*'), Option.None)
  }

  t.test("Parse an empty character class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('')
          )
        )
      )
    )

    let parser = Parser.new('[]')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa
    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 0)))
    t.equal(nfa.matches(''), Option.Some(Match.new('', 0, 0)))
  }

  t.test("Parse a character class") fn (t) {
    let expected = Expression.Single(
      Term.Single(
        Factor.Single(
          Atom.Class(
            Leaf.String('abc')
          )
        )
      )
    )

    let parser = Parser.new('[abc]')
    let tree = parser.parse()
    t.equal(tree, expected)

    let nfa = tree.to_nfa

    t.equal(nfa.matches('a'), Option.Some(Match.new('a', 0, 1)))
    t.equal(nfa.matches('b'), Option.Some(Match.new('b', 0, 1)))
    t.equal(nfa.matches('c'), Option.Some(Match.new('c', 0, 1)))
    t.equal(nfa.matches('d'), Option.None)
    t.equal(nfa.matches(''), Option.None)
  }
}
